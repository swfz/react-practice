{"version":3,"sources":["components/dateInput.tsx","containers/startDate.tsx","containers/endDate.tsx","components/idInput.tsx","containers/workspaceIdInput.tsx","containers/form.tsx","App.tsx","containers/chart.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["DateInput","props","TextField","onChange","label","defaultValue","type","StartDateInputContainer","moment","subtract","format","EndDateInputContainer","IdInput","variant","WorkSpaceIdInputContainer","useState","index","value","idsInput","setIdsInput","Grid","container","direction","justify","alignItems","item","xs","Button","onClick","cur","concat","length","color","map","kv","key","console","log","e","id","target","ids","setParams","params","initialParams","startDate","endDate","FormContainer","inputHandler","keyHash","Card","CardContent","spacing","CardActions","setRequestParams","Counter","like","setLike","handleLike","useCallback","hot","module","requestParams","position","ChartContainer","record","setRecord","graphData","setGraphData","useEffect","projects","Array","from","Set","r","project","hash","reduce","acc","duration","date","start","split","dur","Math","round","data","Object","keys","sort","d","projectTimes","p","push","getData","workspaceId","page","url","requestUrl","init","authString","btoa","header","Headers","set","method","headers","requestHeader","fetch","then","res","json","a","async","totalRows","total_count","per_page","dataByWorkspace","Promise","all","results","flat","width","height","chartType","loader","options","isStacked","rootProps","Boolean","window","location","hostname","match","history","createBrowserHistory","basename","process","rootReducer","combineReducers","router","connectRouter","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAgBeA,EAbG,SAACC,GAAD,OAKd,kBAACC,EAAA,EAAD,CACIC,SAAUF,EAAME,SAChBC,MAAOH,EAAMG,MACbC,aAAcJ,EAAMI,aACpBC,KAAK,UCKEC,EATiB,SAACN,GAC/B,IAAMI,EAAeG,MAElBC,SAAS,EAAG,OACZC,OAAO,cAEV,OAAO,kBAAC,EAAD,eAAWL,aAAcA,EAAcD,MAAO,cAAkBH,KCG1DU,EATe,SAACV,GAC7B,IAAMI,EAAeG,MAElBC,SAAS,EAAG,OACZC,OAAO,cAEV,OAAO,kBAAC,EAAD,eAAWL,aAAcA,EAAcD,MAAO,YAAgBH,KCExDW,EAbC,SAACX,GAAD,OAId,6BACE,kBAACC,EAAA,EAAD,CACEC,SAAUF,EAAME,SAChBC,MAAM,cACNS,QAAQ,eCsCCC,EAvCmB,SAACb,GAAiE,IAAD,EACjEc,mBAAqB,CACnD,CAAEC,MAAO,EAAGC,MAAO,MAF4E,mBAC1FC,EAD0F,KAChFC,EADgF,KAmBjG,OAAO,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,UACnE,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,QAhBK,WACjBT,GAAY,SAAAU,GAAG,OAAIA,EAAIC,OAAO,CAAC,CAAEd,MAAOa,EAAIE,OAAQd,MAAO,UAe1BJ,QAAQ,WAAWmB,MAAM,WAAtD,MAIDd,EAASe,KAAI,SAAAC,GACZ,OACE,kBAACd,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CACES,IAAKD,EAAGlB,MACRA,MAAOkB,EAAGlB,MACVb,UAvBkBa,EAuBakB,EAAGlB,MAtB5CoB,QAAQC,IAAI,4BACL,SAACC,GACN,IAAMC,EAAKD,EAAEE,OAAOvB,MACpBC,EAASF,GAAOC,MAAQsB,EACxBpB,EAAYD,GACZ,IAAMuB,EAAMvB,EAASe,KAAI,SAAAC,GAAE,OAAIA,EAAGjB,SAClChB,EAAMyC,WAAU,SAACC,GAAD,sBAA+BA,EAA/B,CAAuCF,IAAKA,YAPnC,IAACzB,O,kCCLzB,IAAM4B,EAAgB,CAC3BT,IAAK,GACLM,IAAK,GACLI,UAAW,GACXC,QAAS,IAsDIC,IAnDO,SAAC9C,GAAwE,IAAD,EAChEc,mBAAsB6B,GAD0C,mBACrFD,EADqF,KAC7ED,EAD6E,KAGtFM,EAAe,SAACb,GACpB,OAAO,SAACG,GACN,IAAMW,EAAO,eAAMd,EAAMG,EAAEE,OAAOvB,OAClCyB,EAAU,eAAKC,EAAN,GAAiBM,MAO9B,OAAO,kBAACC,EAAA,EAAD,KACL,kBAACC,EAAA,EAAD,KACE,kBAAC/B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,eAAe6B,QAAS,GACjE,kBAAChC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAa6B,QAAS,GAC5D,kBAAChC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAACxB,EAAA,EAAD,CACIC,SAAU6C,EAAa,OACvB5C,MAAM,UACNE,KAAK,WACLO,QAAQ,cAGd,kBAACO,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAyBvB,SAAU6C,EAAa,gBAElD,kBAAC5B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAuBvB,SAAU6C,EAAa,gBAIpD,kBAAC5B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAA2BgB,UAAWA,OAI5C,kBAACW,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,CACIC,QAhCkB,WACxB3B,EAAMqD,iBAAiBX,IAgCjB9B,QAAQ,WACRmB,MAAM,WAHV,c,yGCnCAuB,EAAU,WAAO,IAAD,EACIxC,mBAAS,GADb,mBACbyC,EADa,KACPC,EADO,KAEpBrB,QAAQC,IAAI,kBAIZ,IAAMqB,EAAaC,uBAAY,kBAAMF,GAAQ,SAAA5B,GAAG,OAAIA,EAAM,OAAI,IAE9D,OACE,oCACE,4BAAQD,QAAS8B,GAAjB,OACA,uCACA,6BAAMF,KAKGI,kBAAIC,EAAJD,EApCO,WAAO,IAAD,EACgB7C,mBACxC6B,KAFwB,mBACnBkB,EADmB,KACJR,EADI,KAK1B,OACE,6BACE,kBAAC,IAAD,CAAQS,SAAS,UAAjB,kBACA,kBAACR,EAAD,MACA,6BAEA,kBAAC,IAAD,CAAeD,iBAAkBA,IAEjC,6BACA,kBAAC,IAAD,CAAgBQ,cAAeA,U,0GCqGtBE,IApHQ,SAAC/D,GAA2C,IAAD,EACpCc,mBAAiC,IADG,mBACzDkD,EADyD,KACjDC,EADiD,OAE9BnD,qBAF8B,mBAEzDoD,EAFyD,KAE9CC,EAF8C,KAMhEC,qBAAU,WACRjC,QAAQC,IAAI,+BACZD,QAAQC,IAAI4B,GACZ7B,QAAQC,IAAI,+BACZ,IAAMiC,EAAWC,MAAMC,KAAK,IAAIC,IAAIR,EAAOhC,KAAI,SAAAyC,GAAC,OAAIA,EAAEC,aAChDC,EAAOX,EAAOY,QAAO,SAACC,EAAUjD,GACpC,IATekD,EASTC,EAAOnD,EAAIoD,MAAMC,MAAM,KAAK,GAUlC,OATKJ,EAAIE,KACPF,EAAIE,GAAQ,IAETF,EAAIE,GAAMnD,EAAI8C,WACjBG,EAAIE,GAAMnD,EAAI8C,SAAW,GAG3BG,EAAIE,GAAMnD,EAAI8C,WAjBCI,EAiBqBlD,EAAIsD,IAhBnCC,KAAKC,MAAON,EAAW,IAAO,GAAK,GAAM,KAAS,KAkBhDD,IACN,IACH1C,QAAQC,IAAIuC,GAEZ,IAAMU,EAAOC,OAAOC,KAAKZ,GACtBa,OACAZ,QACC,SAACC,EAAKY,GACJ,IAAMC,EAAerB,EAASrC,KAAI,SAAA2D,GAAC,OAAIhB,EAAKc,GAAGE,IAAM,KAGrD,OAFAd,EAAIe,KAAK,CAACH,GAAG5D,OAAO6D,IAEbb,IAET,CAAC,CAAC,QAAQhD,OAAOwC,KAMrB,OAHAlC,QAAQC,IAAIiD,GACZlB,EAAakB,GAEN,kBAAMlB,EAAa,CAAC,QAC1B,CAACH,IAEJ,IA0BM6B,EAAU,SAAVA,EAAWC,EAAqBC,GACpC,IAAMC,EA3BW,SACjBnC,EACAiC,EACAC,GAEA,IAAMnD,EAAYiB,EAAcjB,UAC1BC,EAAUgB,EAAchB,QACxBmD,EAAG,6DAAyDD,EAAzD,yBAA8ED,EAA9E,kBAAmGlD,EAAnG,kBAAsHC,EAAtH,sBAKT,OAJAV,QAAQC,IAAI,2BACZD,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAI,2BAEL4D,EAeKC,CAAWjG,EAAM6D,cAAeiC,EAAaC,GACnDG,EAbc,SAACrC,GACrB,IAAMsC,EAAaC,KAAK,GAAD,OAAIvC,EAAc3B,IAAlB,eACjBmE,EAAS,IAAIC,QAGnB,OAFAD,EAAOE,IAAI,gBAAX,gBAAqCJ,IAE9B,CACLK,OAAQ,MACRC,QAASJ,GAMEK,CAAc1G,EAAM6D,eAEjC,OAAO8C,MAAMX,EAAKE,GACbU,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAOE,GAAP,eAAAC,EAAAC,OAAA,mDACEC,EAAYH,EAAKI,eACPnB,EAAO,GAAKe,EAAKK,SAAWL,EAAKzB,KAAKvD,OACzCmF,GAHT,6BAIKH,EAAKzB,KAJV,WAAA0B,EAAA,MAI4BlB,EAAQC,EAAaC,EAAO,IAJxD,iDAIelE,OAJf,kDAMKiF,EAAKzB,MANV,0CAsBZ,OAXAjB,qBAAU,WACR,GAAKpE,EAAM6D,cAAc3B,IAAzB,CAIA,IAAMkF,EAAkBpH,EAAM6D,cAAcrB,IAAIR,KAAI,SAAAM,GAAE,OAAIuD,EAAQvD,EAAI,MACtE+E,QAAQC,IAAIF,GAAiBR,MAAK,SAACW,GACjCtD,EAAUsD,EAAQC,KAAK,UAExB,CAACxH,EAAM6D,gBAEH,oCACH,kBAAC,IAAD,CACE4D,MAAO,QACPC,OAAQ,QACRC,UAAU,WACVC,OAAQ,8CACRvC,KAAMnB,EACN2D,QAAS,CACPC,WAAW,GAGbC,UAAW,CAAE,cAAe,U,0KCxGhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCbOC,EAAUC,YAAqB,CAC1CC,SAAUC,KAGCC,EAAcC,0BAAgB,CACzCC,OAAQC,YAAcP,KAUTQ,EALDC,YAAe,CAC3BC,QAASN,EACTO,WAAW,YAAKC,iBCPlBC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAiBR,QAASA,GACxB,kBAACe,EAAA,EAAD,QAGJC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.d4ab0017.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst DateInput = (props: {\r\n  defaultValue?: string;\r\n  label: string;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}) => (\r\n    <TextField\r\n        onChange={props.onChange}\r\n        label={props.label}\r\n        defaultValue={props.defaultValue}\r\n        type=\"date\"\r\n    />\r\n);\r\n\r\nexport default DateInput;\r\n","import React, {ComponentProps} from 'react';\r\nimport * as moment from 'moment';\r\nimport DateInput from '../components/dateInput';\r\n\r\ntype DateInputProps = ComponentProps<typeof DateInput>;\r\ntype RequiredOnChange = Required<Pick<DateInputProps, 'onChange'>>;\r\ntype Props = Partial<DateInputProps> & RequiredOnChange;\r\n\r\nconst StartDateInputContainer = (props: Props) => {\r\n  const defaultValue = moment\r\n    .default()\r\n    .subtract(8, 'day')\r\n    .format('YYYY-MM-DD');\r\n\r\n  return <DateInput defaultValue={defaultValue} label={'Start Date'} {...props} />;\r\n};\r\n\r\nexport default StartDateInputContainer;\r\n","import React, {ComponentProps} from 'react';\r\nimport * as moment from 'moment';\r\nimport DateInput from '../components/dateInput';\r\n\r\ntype DateInputProps = ComponentProps<typeof DateInput>;\r\ntype RequiredOnChange = Required<Pick<DateInputProps, 'onChange'>>;\r\ntype Props = Partial<DateInputProps> & RequiredOnChange;\r\n\r\nconst EndDateInputContainer = (props: Props) => {\r\n  const defaultValue = moment\r\n    .default()\r\n    .subtract(1, 'day')\r\n    .format('YYYY-MM-DD');\r\n\r\n  return <DateInput defaultValue={defaultValue} label={'End Date'} {...props} />;\r\n};\r\n\r\nexport default EndDateInputContainer;\r\n","import React, { ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst IdInput = (props: {\r\n  index: number;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}) => (\r\n  <div>\r\n    <TextField\r\n      onChange={props.onChange}\r\n      label=\"WorkSpaceId\"\r\n      variant=\"outlined\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default IdInput;\r\n","import React, { ChangeEvent, Dispatch, SetStateAction, useState } from 'react';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport IdInput from '../components/idInput';\r\nimport { InputParams } from './form';\r\n\r\ntype IdsInput = {\r\n  index: number;\r\n  value: string;\r\n};\r\n\r\nconst WorkSpaceIdInputContainer = (props: { setParams: Dispatch<SetStateAction<InputParams>> }) => {\r\n  const [idsInput, setIdsInput] = useState<IdsInput[]>([\r\n    { index: 0, value: '' },\r\n  ]);\r\n\r\n  const addIdInput = () => {\r\n    setIdsInput(cur => cur.concat([{ index: cur.length, value: '' }]));\r\n  };\r\n  const partialChangeIdInput = (index: number) => {\r\n    console.log('load partialChageIdInput');\r\n    return (e: ChangeEvent<HTMLInputElement>) => {\r\n      const id = e.target.value;\r\n      idsInput[index].value = id;\r\n      setIdsInput(idsInput);\r\n      const ids = idsInput.map(kv => kv.value);\r\n      props.setParams((params: InputParams) => ({ ...params, ids: ids }));\r\n    };\r\n  };\r\n\r\n  return <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n      <Grid item xs={1}>\r\n        <Button onClick={addIdInput} variant=\"outlined\" color=\"default\">\r\n          +\r\n        </Button>\r\n      </Grid>\r\n      {idsInput.map(kv => {\r\n        return (\r\n          <Grid item xs={2}>\r\n            <IdInput\r\n              key={kv.index}\r\n              index={kv.index}\r\n              onChange={partialChangeIdInput(kv.index)}\r\n            />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n};\r\n\r\nexport default WorkSpaceIdInputContainer;\r\n","import React, { ChangeEvent, Dispatch, SetStateAction, useState } from 'react';\r\nimport { Button, Card, CardActions, CardContent, Grid, TextField} from '@material-ui/core';\r\nimport StartDateInputContainer from './startDate';\r\nimport EndDateInputContainer from './endDate';\r\nimport WorkSpaceIdInputContainer from './workspaceIdInput';\r\n\r\nexport type InputParams = {\r\n  key: string;\r\n  ids: string[];\r\n  startDate: string;\r\n  endDate: string;\r\n};\r\n\r\nexport const initialParams = {\r\n  key: '',\r\n  ids: [],\r\n  startDate: '',\r\n  endDate: '',\r\n};\r\n\r\nconst FormContainer = (props: { setRequestParams: Dispatch<SetStateAction<InputParams>> }) => {\r\n  const [params, setParams] = useState<InputParams>(initialParams);\r\n\r\n  const inputHandler = (key: 'key' | 'startDate' | 'endDate') => {\r\n    return (e: ChangeEvent<HTMLInputElement>) => {\r\n      const keyHash = { [key]: e.target.value };\r\n      setParams({ ...params, ...keyHash });\r\n    };\r\n  };\r\n  const searchButtonClick = () => {\r\n    props.setRequestParams(params);\r\n  };\r\n\r\n  return <Card>\r\n    <CardContent>\r\n      <Grid container direction=\"column\" justify=\"space-around\" spacing={4}>\r\n        <Grid item xs={12}>\r\n          <Grid container direction=\"row\" justify=\"flex-start\" spacing={4}>\r\n            <Grid item xs={2}>\r\n              <TextField\r\n                  onChange={inputHandler('key')}\r\n                  label=\"API Key\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <StartDateInputContainer onChange={inputHandler('startDate')}/>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <EndDateInputContainer onChange={inputHandler('endDate')}/>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <WorkSpaceIdInputContainer setParams={setParams}/>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <CardActions>\r\n      <Button\r\n          onClick={searchButtonClick}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n      >\r\n        Search\r\n      </Button>\r\n    </CardActions>\r\n  </Card>\r\n};\r\n\r\nexport default FormContainer;\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { AppBar } from '@material-ui/core';\nimport FormContainer, { initialParams, InputParams } from './containers/form';\nimport ChartContainer from './containers/chart';\n\nconst App: React.FC = () => {\n  const [requestParams, setRequestParams] = useState<InputParams>(\n    initialParams\n  );\n\n  return (\n    <div>\n      <AppBar position=\"static\">Toggl Reporter</AppBar>\n      <Counter />\n      <br />\n\n      <FormContainer setRequestParams={setRequestParams} />\n\n      <br />\n      <ChartContainer requestParams={requestParams} />\n    </div>\n  );\n};\n\nconst Counter = () => {\n  const [like, setLike] = useState(0);\n  console.log('render counter');\n\n  // 上は`like`の値が定義された瞬間の値`0`で固定されてしまうのでボタンを押しまくってもカウントが上がらない\n  // const handleLike = useCallback(() => setLike(like + 1), []);\n  const handleLike = useCallback(() => setLike(cur => cur + 1), []);\n\n  return (\n    <>\n      <button onClick={handleLike}>Up!</button>\n      <div>Count:</div>\n      <div>{like}</div>\n    </>\n  );\n};\n\nexport default hot(module)(App);\n","import React, { useEffect, useState } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport { DetailResponse } from '../api/detail';\r\nimport { InputParams } from './form';\r\n\r\nconst ChartContainer = (props: { requestParams: InputParams }) => {\r\n  const [record, setRecord] = useState<DetailResponse['data']>([]);\r\n  const [graphData, setGraphData] = useState();\r\n  const calculate = (duration: number) => {\r\n    return Math.round((duration / 1000 / 60 / 60) * 100.0) / 100;\r\n  };\r\n  useEffect(() => {\r\n    console.log('called change record effect');\r\n    console.log(record);\r\n    console.log('called change record effect');\r\n    const projects = Array.from(new Set(record.map(r => r.project)));\r\n    const hash = record.reduce((acc: any, cur) => {\r\n      const date = cur.start.split('T')[0];\r\n      if (!acc[date]) {\r\n        acc[date] = {};\r\n      }\r\n      if (!acc[date][cur.project]) {\r\n        acc[date][cur.project] = 0;\r\n      }\r\n\r\n      acc[date][cur.project] += calculate(cur.dur);\r\n\r\n      return acc;\r\n    }, {});\r\n    console.log(hash);\r\n\r\n    const data = Object.keys(hash)\r\n      .sort()\r\n      .reduce(\r\n        (acc, d) => {\r\n          const projectTimes = projects.map(p => hash[d][p] || 0);\r\n          acc.push([d].concat(projectTimes));\r\n\r\n          return acc;\r\n        },\r\n        [['date'].concat(projects)]\r\n      );\r\n\r\n    console.log(data);\r\n    setGraphData(data);\r\n\r\n    return () => setGraphData([[]]);\r\n  }, [record]);\r\n\r\n  const requestUrl = (\r\n    requestParams: InputParams,\r\n    workspaceId: string,\r\n    page: number\r\n  ) => {\r\n    const startDate = requestParams.startDate;\r\n    const endDate = requestParams.endDate;\r\n    const url = `https://toggl.com/reports/api/v2/details.json?page=${page}&workspace_id=${workspaceId}&since=${startDate}&until=${endDate}&user_agent=client`;\r\n    console.log('params-----------------');\r\n    console.log(requestParams);\r\n    console.log('params-----------------');\r\n\r\n    return url;\r\n  };\r\n\r\n  const requestHeader = (requestParams: InputParams) => {\r\n    const authString = btoa(`${requestParams.key}:api_token`);\r\n    const header = new Headers();\r\n    header.set('Authorization', `Basic ${authString}`);\r\n\r\n    return {\r\n      method: 'GET',\r\n      headers: header,\r\n    };\r\n  };\r\n\r\n  const getData = (workspaceId: string, page: number): Promise<DetailResponse['data']> => {\r\n    const url = requestUrl(props.requestParams, workspaceId, page);\r\n    const init = requestHeader(props.requestParams);\r\n\r\n    return fetch(url, init)\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .then(async (json: DetailResponse) => {\r\n          const totalRows = json.total_count;\r\n          const cursor = (page - 1) * json.per_page + json.data.length;\r\n          if (cursor < totalRows) {\r\n            return json.data.concat(await getData(workspaceId, page + 1));\r\n          } else {\r\n            return json.data;\r\n          }\r\n        });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!props.requestParams.key) {\r\n      return;\r\n    }\r\n\r\n    const dataByWorkspace = props.requestParams.ids.map(id => getData(id, 1));\r\n    Promise.all(dataByWorkspace).then((results: DetailResponse['data'][]) => {\r\n      setRecord(results.flat(1));\r\n    });\r\n  }, [props.requestParams]);\r\n\r\n  return <>\r\n      <Chart\r\n        width={'800px'}\r\n        height={'500px'}\r\n        chartType=\"BarChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={graphData}\r\n        options={{\r\n          isStacked: true,\r\n        }}\r\n        // For tests\r\n        rootProps={{ 'data-testid': '2' }}\r\n      />\r\n  </>\r\n};\r\n\r\nexport default ChartContainer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n\nexport const rootReducer = combineReducers({\n  router: connectRouter(history),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware()],\n});\n\nexport default store;\n","import 'stop-runaway-react-effects/hijack';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store, { history } from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif (process.env.NODE_ENV === 'development' && (module as any).hot) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (module as any).hot.accept('./state/store', () => {\n    // HMR時にreduxストアの中身を維持する\n    store.replaceReducer(require('./state/store').rootReducer);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}